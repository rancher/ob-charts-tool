name: Produce PR Artifacts

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number to build image for'
        required: true
        type: number

concurrency:
  group: prs-${{ github.event.inputs.pr_number }}
  cancel-in-progress: true

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - run: git fetch --force --tags
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: 1.24
      - uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --clean
      -
        name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: myapp
          path: ./dist/*

  comment-on-pr:
    name: Comment on PR with artifact links
    runs-on: ubuntu-latest
    needs:
      - goreleaser
    permissions:
      pull-requests: write
      actions: read
    steps:
      - name: Comment on PR with artifact links
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          prNumber: ${{ github.event.inputs.pr_number }}
        with:
          script: |
            const prNumber = Number(process.env.prNumber);
            if (!prNumber) {
              core.setFailed('pr_number input is required to comment on a PR.');
            }

            // List artifacts for the current workflow run
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
              per_page: 100,
            });

            const artifacts = data.artifacts || [];

            let bodyLines = [];
            bodyLines.push(`### Artifacts produced for PR #${prNumber}:`);
            if (artifacts.length === 0) {
              bodyLines.push('\nNo artifacts were found for this run.');
            } else {
              bodyLines.push('\nThe following artifacts are available:');
              for (const art of artifacts) {
                // archive_download_url requires authentication; that's fine for repo members viewing the PR.
                bodyLines.push(`- ${art.name} (size ~${Math.round((art.size_in_bytes || 0)/1024)} KB) - [Download](${art.archive_download_url})`);
              }

              // Also include a link to the run page where artifacts are listed in the UI
              const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              bodyLines.push(`\nView all artifacts in the Actions run: ${runUrl}`);
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: bodyLines.join('\n')
            });